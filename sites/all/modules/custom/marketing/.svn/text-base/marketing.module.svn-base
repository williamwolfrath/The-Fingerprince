<?php


function marketing_menu() {
    $items = array();
    
    $items['marketing'] = array(
       'title' => 'Email Marketing',
       'description' => 'Web interface for the creation and sending of HTML marketing emails.',
       'page callback' => 'marketing_email',
       'access callback' => TRUE,
       'type' => MENU_CALLBACK,
    );
    $items['marketing/sent/%'] = array(
       'title' => 'Marketing Sent Email',
       'description' => 'A sent email.',
       'page callback' => 'marketing_get_sent_email',
       'page arguments' => array(2),
       'access callback' => TRUE,
       'type' => MENU_CALLBACK,
    );
    $items['marketing-logout'] = array(
       'title' => 'Marketing Logout',
       'description' => 'To logout from the marketing page without leaving it.',
       'page callback' => 'marketing_logout',
       'access callback' => TRUE,
       'type' => MENU_CALLBACK,
    );
    
    return $items;
}

/* menu functions */
function marketing_email() {
    //drupal_add_js(drupal_get_path("module", "marketing")."/ui/ui.dialog.js");
    drupal_add_js(drupal_get_path("module", "marketing")."/ui-with-theme/js/jquery-ui-1.6.custom.min.js");
    drupal_add_js(drupal_get_path("module", "marketing")."/marketing-emails.js");
    drupal_add_css(drupal_get_path("module", "marketing")."/ui-with-theme/development-bundle/themes/trontastic/ui.all.css");
    // drupal_get_form calls drupal_render on the form. 
    $rendered = drupal_get_form('marketing_emailform');
    $html_output = theme('marketing-email-create', $rendered);
    return $html_output;
}


function marketing_get_sent_email($email_id) {
    $sql = "SELECT * FROM {marketing} WHERE eid=%d";
    $result= db_query(db_rewrite_sql($sql), $email_id);
    $sent_email = db_fetch_object($result);
    $html_output = theme('marketing-sent-email-full', $sent_email);
    return $html_output;
}


function marketing_logout() {
    // log the user out but keep them on the marketing page
    // since this is only for Peter, probably easier to just add 'destination' param to QS.
    // I did that but I hate that solution; shouldn't expose flow to the user like that
    // maybe I'll revisit this...
}



/**
 * Define the marketing email form
 */
function marketing_emailform() {
    $form['to'] = array(
        '#title' => t('To Address'),
        '#type' => 'textfield',
        '#description' => t('The address of the person to send the email to.'),
    );
    $form['subject'] = array(
        '#title' => t('Subject'),
        '#type' => 'textfield',
        '#description' => t('The subject of the email.'),
    );
    $form['email_body'] = array(
        '#title' => t('Email Body'),
        '#type' => 'textarea',
        '#description' => t('The body of the email.'),
    );
    $form['submit'] = array(
       '#type' => 'submit',
       '#value' => t('Send'),
    );
    return $form;
}


function marketing_emailform_submit($form, &$form_state) {
    global $user;
    $to_address = $form_state['values']['to'];
    $subject = $form_state['values']['subject'];
    $email_body = $form_state['values']['email_body'];
    $params['account'] = $user;
    $params['to_address'] = $to_address;
    $params['email_body'] = $email_body;
    $params['subject'] = $subject;
    // store 'from' address as a var or make sure it uses the one from the smtp settings. 
    drupal_mail('marketing', 'emails', $to_address, user_preferred_language($user), $params, "yuckygucky@yahoo.com");  // first param refers to 'marketing_mail' function below
    // save the email to the db
    $sent_email = new stdClass();
    $sent_email->uid = $user->uid;
    $sent_email->to_address = t($to_address);
    $sent_email->subject = t($subject);
    $sent_email->email_body = t(filter_filter("process", 1, -1, $email_body));
    $sent_email->date_used = date("Y-m-d H:i:s");
    drupal_write_record('marketing', $sent_email);
    drupal_set_message("Your email has been sent to " . $to_address . ".");
}




// definitely need to just refactor this a bit, some stuff doesn't belong here..
function marketing_mail($key, &$message, $params) {
    $language = $message['language'];
    $variables = user_mail_tokens($params['account'], $language);
    switch ($key) {
        case 'emails':
            //watchdog('marketing-message', print_r($message, true));
            //watchdog('marketing-params', print_r($params, true));
            $boundary = '----=_NextPart_'.md5(uniqid());
            $message['headers']['Content-Type'] = "multipart/alternative; charset=utf-8; boundary=\"$boundary\"";
            //$message['headers']['Content-Type'] = "text/html; charset=utf-8; format=flowed;";
            $message['subject'] = $params['subject'];
            //watchdog('marketing-message2', print_r($message, true));
            $body_text = create_email_body($params['email_body'], $boundary);
            $message['body'][] = $body_text;
            break; 
    }
}


function create_email_body($body, $boundary) {
    $newbod = filter_filter("process", 1, -1, $body);
    $bhtml= theme('marketing-email-body', $newbod);
    
    //make sure original HTML had nice line breaks 
    $btext = preg_replace('/<style>.+?<\/style>/ims', '', $bhtml); 
    $btext = strip_tags( $btext ); 
    $multi_body  = "
    
        This is a multi-part message in MIME format.
    
        --$boundary
        Content-Type: text/plain; charset=UTF-8; format=flowed; 
        Content-Transfer-Encoding: 8bit
    
        $btext
    
        --$boundary
        Content-Type: text/html; charset=UTF-8; format=flowed; 
        Content-Transfer-Encoding: 8bit
    
        $bhtml
    
    ";

    return $multi_body;
}


function marketing_emailform_validate($form, &$form_state) {
    if (!valid_email_address($form_state['values']['to'])) {
        form_set_error('to', t('Please enter a valid email address.'));
    }
    if (empty($form_state['values']['subject'])) {
        form_set_error('subject', t('Please enter a subject.'));
    }
    if (empty($form_state['values']['email_body'])) {
        form_set_error('email_body', t('Please enter an email body.'));
    }
}


// the block that shows previously sent emails, for reference
function marketing_block($op='list', $delta=0, $edit=array()) {
    switch($op) {
		case 'list':
			$blocks[0]['info'] = t('FP Marketing Sent Emails');
			$blocks[0]['cache'] = BLOCK_NO_CACHE;
			return $blocks;
		case 'view':
			global $user;
			$sent_emails_list = marketing_get_sent_emails($user);
			$block['content'] = theme('marketing-sent-emails', $sent_emails_list);
			return $block;
	}
}


function marketing_get_sent_emails($user) {
    $output = "";
    $sent_emails = db_query("SELECT * FROM {marketing} WHERE uid = '%d' ", $user->uid);
    while ($sent_email = db_fetch_object($sent_emails)) {
        $output .= theme('marketing-sent-email', $sent_email);
    }
    return $output;
}


function marketing_theme() {
    return array(
       'marketing-email-create' => array(
            'template' => 'marketing-email-create',
            'arguments' => array('rform'=>$rendered),
        ),
       'marketing-email-body' => array(
            'template' => 'marketing-email-body',
            'arguments' => array('email_body'=>$body),
       ),
       'marketing-sent-emails' => array(
            'template' => 'marketing-sent-emails',
            'arguments' => array('sent_emails_list'=>$sent_emails_list),
       ),
       'marketing-sent-email' => array(
            'template' => 'marketing-sent-email',
            'arguments' => array('sent_email'=>$sent_email),
       ),
       'marketing-sent-email-full' => array(
            'template' => 'marketing-sent-email-full',
            'arguments' => array('sent_email'=>$sent_email),
       ),
    );
}